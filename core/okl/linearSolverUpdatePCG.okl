/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

// WARNING: p_blockSize must be a power of 2

@kernel void updatePCG(const dlong N,
                       const dlong Nblocks,
                       @restrict const dfloat *p,
                       @restrict const dfloat *Ap,
                       const dfloat alpha,
                       @restrict dfloat *x,
                       @restrict dfloat *r,
                       @restrict dfloat *redr){

  for(dlong b=0;b<Nblocks;++b;@outer(0)){

    @shared volatile dfloat s_dot[p_blockSize];

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      dlong id = t + b*p_blockSize;
      s_dot[t] = 0.0;
      while (id<N) {
        dfloat rn = r[id];

        x[id] += alpha*p[id];
        rn -= alpha*Ap[id];

        s_dot[t] += rn*rn;

        r[id] = rn;
        id += p_blockSize*Nblocks;
      }
    }
    @barrier("local");

#if p_blockSize>512
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<512) s_dot[t] += s_dot[t+512];
    @barrier("local");
#endif

#if p_blockSize>256
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<256) s_dot[t] += s_dot[t+256];
    @barrier("local");
#endif

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<128) s_dot[t] += s_dot[t+128];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 64) s_dot[t] += s_dot[t+ 64];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 32) s_dot[t] += s_dot[t+ 32];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 16) s_dot[t] += s_dot[t+ 16];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  8) s_dot[t] += s_dot[t+  8];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  4) s_dot[t] += s_dot[t+  4];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  2) s_dot[t] += s_dot[t+  2];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  1) redr[b] = s_dot[0] + s_dot[1];
  }
}

@kernel void weightedUpdatePCG(const dlong N,
                               const dlong Nblocks,
                               @restrict const dfloat *invDegree,
                               @restrict const dfloat *p,
                               @restrict const dfloat *Ap,
                               const dfloat alpha,
                               @restrict dfloat *x,
                               @restrict dfloat *r,
                               @restrict dfloat *redr){

  for(dlong b=0;b<Nblocks;++b;@outer(0)){

    @shared volatile dfloat s_dot[p_blockSize];

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      dlong id = t + b*p_blockSize;
      s_dot[t] = 0.0;
      while (id<N) {
        dfloat rn = r[id];

        x[id] += alpha*p[id];
        rn -= alpha*Ap[id];

        s_dot[t] += invDegree[id]*rn*rn;

        r[id] = rn;
        id += p_blockSize*Nblocks;
      }
    }
    @barrier("local");

#if p_blockSize>512
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<512) s_dot[t] += s_dot[t+512];
    @barrier("local");
#endif

#if p_blockSize>256
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<256) s_dot[t] += s_dot[t+256];
    @barrier("local");
#endif

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<128) s_dot[t] += s_dot[t+128];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 64) s_dot[t] += s_dot[t+ 64];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 32) s_dot[t] += s_dot[t+ 32];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 16) s_dot[t] += s_dot[t+ 16];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  8) s_dot[t] += s_dot[t+  8];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  4) s_dot[t] += s_dot[t+  4];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  2) s_dot[t] += s_dot[t+  2];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  1) redr[b] = s_dot[0] + s_dot[1];
  }
}

#if 0
@kernel void weightedUpdatePCG(const dlong N,
                               const dlong Nblocks,
                               @restrict const dfloat *invDegree,
                               @restrict const dfloat *p,
                               @restrict const dfloat *Ap,
                               const dfloat alpha,
                               @restrict dfloat *x,
                               @restrict dfloat *r,
                               @restrict dfloat *redr){

  for(dlong b=0;b<Nblocks;++b;@outer(0)){

    @shared volatile dfloat s_sum[p_blockSize];
    @shared volatile dfloat s_warpSum[p_NwarpsUpdatePCG]; // good  to 256

    @exclusive int r_n; // limited to 256 in Serial mode

    for(int t=0;t<p_blockSize;++t;@inner(0)){

      r_n = t%32;

      dfloat sum = 0;

      for(int n=t+b*p_blockSize;n<N;n+=Nblocks*p_blockSize){
        dfloat xn = x[n];
        dfloat rn = r[n];

        const dfloat pn = p[n];
        const dfloat Apn = Ap[n];

        xn += alpha*pn;
        rn -= alpha*Apn;
        sum += invDegree[n]*rn*rn;

        x[n] = xn;
        r[n] = rn;
      }

      s_sum[t] = sum;
    }

    // reduce by factor of 32
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(r_n<16) s_sum[t] += s_sum[t+16];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(r_n< 8) s_sum[t] += s_sum[t+8];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(r_n< 4) s_sum[t] += s_sum[t+4];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(r_n< 2) s_sum[t] += s_sum[t+2];

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      const int w = t/32;
      if(r_n< 1) s_warpSum[w] = s_sum[t] + s_sum[t+1];
    }

    @barrier("local");

    // 4 => 1
#if (p_NwarpsUpdatePCG>=32)
    for(int t=0;t<p_blockSize;++t;@inner(0))
      if(t<16) s_warpSum[t] += s_warpSum[t+16];
#endif
#if (p_NwarpsUpdatePCG>=16)
    for(int t=0;t<p_blockSize;++t;@inner(0))
      if(t<8) s_warpSum[t] += s_warpSum[t+8];
#endif

#if (p_NwarpsUpdatePCG>=8)
    for(int t=0;t<p_blockSize;++t;@inner(0))
      if(t<4) s_warpSum[t] += s_warpSum[t+4];
#endif

#if (p_NwarpsUpdatePCG>=4)
    for(int t=0;t<p_blockSize;++t;@inner(0))
      if(t<2) s_warpSum[t] += s_warpSum[t+2];
#endif

    for(int t=0;t<p_blockSize;++t;@inner(0)){
#if (p_NwarpsUpdatePCG>=2)
      if(t<1) redr[b] = s_warpSum[0] + s_warpSum[1];
#else
      if(t<1) redr[b] = s_warpSum[0];
#endif
    }
  }
}
#endif