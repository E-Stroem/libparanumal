/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


// isotropic advection
@kernel void advectionVolumeHex3D(const dlong Nelements,
				  @restrict const dfloat * vgeo,
				  @restrict const dfloat * D,
				  @restrict const dfloat * advectionVelocityJW,
				  @restrict const dfloat * q,
				  @restrict dfloat * rhsq){
  
  // each thread-block outputs p_NblockAdvVol elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockAdvVol;@outer(0)){

    // collocation differentiation
    @shared dfloat s_D[p_Nq][p_Nq];
    
    // use 2*Nq^2 shared and 2*Nq*Nq*Nq registers 
    // [ 3D shared would required 3*Nq*Nq*Nq shared ]
    
    @shared dfloat s_F[p_NblockAdvVol][p_Nq][p_Nq];
    @shared dfloat s_G[p_NblockAdvVol][p_Nq][p_Nq];

    @exclusive dfloat r_q[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Aq[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Hk[p_NblockAdvVol];

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

#pragma unroll p_Nq
	    for(int k=0;k<p_Nq;++k){
	      const dlong  qbase = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      r_q[es][k] = q[qbase+0*p_Np];
	    }
	  }

#pragma unroll p_Nq
	  for(int k=0;k<p_Nq;++k){
	    r_Aq[es][k] = 0;
	  }
	}

	s_D[j][i] = D[j*p_Nq+i];
      }
    }
    
#pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
	  
#pragma unroll p_NblockAdvVol
	  for(int es=0;es<p_NblockAdvVol;++es){
	    
	    const dlong e = eo+es;
	    if(e<Nelements){
	      // geometric factors
	      const dlong gbase = e*p_Np*p_dim + k*p_Nq*p_Nq + j*p_Nq + i;

	      // J*W*c_x, J*W*c_y, J*W*c_z
	      const dfloat Fr = advectionVelocityJW[gbase+p_Np*0];
	      const dfloat Fs = advectionVelocityJW[gbase+p_Np*1];
	      const dfloat Ft = advectionVelocityJW[gbase+p_Np*2];
	      
	      const dfloat qn = r_q[es][k];
	      
	      s_F[es][j][i] = Fr*qn;
	      s_G[es][j][i] = Fs*qn;
	      r_Hk[es]      = Ft*qn;
	    }
	  }
	}
      }
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){    

#pragma unroll p_Nq          
          for(int n=0;n<p_Nq;++n){
	    // read D^t
            const dfloat Dni = s_D[n][i]; 
            const dfloat Dnj = s_D[n][j];
            const dfloat Dkn = s_D[k][n];

	    // 6*p_NblockAdvVol flops for 8*3 + p_NblockAdvVol*2*8 bytes from shared

#pragma unroll p_NblockAdvVol
	    for(int es=0;es<p_NblockAdvVol;++es){	    
	      r_Aq[es][k] += Dni*s_F[es][j][n];
	      r_Aq[es][k] += Dnj*s_G[es][n][i];
	      r_Aq[es][n] += Dkn*r_Hk[es]; // can move this up
	    }
          }
	}
      }
    }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){    

#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

#pragma unroll p_Nq 	    
	    for(int k=0;k<p_Nq;++k){    
	      const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
	      const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
	      
	      const dlong base = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      // move to rhs   (dq/dt = div (c*q) => -div'V*M*c*q
	      rhsq[base+0*p_Np] = -invJW*r_Aq[es][k];
	    }
	  }
	}
      }
    }
  }
}




@kernel void advectionSkewVolumeHex3D(const dlong Nelements,
				      @restrict const dfloat * vgeo,
				      @restrict const dfloat * D,
				      @restrict const dfloat * advectionVelocityJW,
				      @restrict const dfloat * q,
				      @restrict dfloat * rhsq){
  
  // each thread-block outputs p_NblockAdvVol elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockAdvVol;@outer(0)){

    // collocation differentiation
    @shared dfloat s_D[p_Nq][p_Nq];
   
    
    // use 2*Nq^2 shared and 2*Nq*Nq*Nq registers 
    // [ 3D shared would required 3*Nq*Nq*Nq shared ]
    
    @shared dfloat s_F[p_NblockAdvVol][p_Nq][p_Nq];
    @shared dfloat s_G[p_NblockAdvVol][p_Nq][p_Nq];
    @shared dfloat s_q[p_NblockAdvVol][p_Nq][p_Nq];

    @exclusive dfloat r_q[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Aq[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Hk[p_NblockAdvVol];
    @exclusive dfloat r_Fr[p_NblockAdvVol];
    @exclusive dfloat r_Fs[p_NblockAdvVol];
    @exclusive dfloat r_Ft[p_NblockAdvVol];

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

#pragma unroll p_Nq
	    for(int k=0;k<p_Nq;++k){
	      const dlong  qbase = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      r_q[es][k] = q[qbase+0*p_Np];
	    }
	  }

#pragma unroll p_Nq
	  for(int k=0;k<p_Nq;++k){
	    r_Aq[es][k] = 0;
	  }
	}

	s_D[j][i] = D[j*p_Nq+i];
      }
    }
    
#pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
	  
#pragma unroll p_NblockAdvVol
	  for(int es=0;es<p_NblockAdvVol;++es){
	    
	    const dlong e = eo+es;
	    if(e<Nelements){
	      // geometric factors
	      const dlong gbase = e*p_Np*p_dim + k*p_Nq*p_Nq + j*p_Nq + i;

	      // J*W*c_x, J*W*c_y, J*W*c_z
	      r_Fr[es] = advectionVelocityJW[gbase+p_Np*0];
	      r_Fs[es] = advectionVelocityJW[gbase+p_Np*1];
	      r_Ft[es] = advectionVelocityJW[gbase+p_Np*2];
	      
	      const dfloat qn = r_q[es][k];

	      s_q[es][j][i] = qn;
	      s_F[es][j][i] = r_Fr[es]*qn;
	      s_G[es][j][i] = r_Fs[es]*qn;
	      r_Hk[es]      = r_Ft[es]*qn;
	    }
	  }
	}
      }
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){    

#pragma unroll p_Nq          
          for(int n=0;n<p_Nq;++n){
	    // read D^t
            const dfloat Dni = s_D[n][i]; 
            const dfloat Dnj = s_D[n][j];
            const dfloat Dkn = s_D[k][n];
	    const dfloat Din = s_D[i][n]; 
	    const dfloat Djn = s_D[j][n];

	    // 6*p_NblockAdvVol flops for 8*3 + p_NblockAdvVol*2*8 bytes from shared

#pragma unroll p_NblockAdvVol
	    for(int es=0;es<p_NblockAdvVol;++es){
	      // MISSING FACTOR OF 0.5 (added below)
	      r_Aq[es][k] += Dni*s_F[es][j][n];
	      r_Aq[es][k] += Dnj*s_G[es][n][i];
	      // THIS FEELS WRONG
	      r_Aq[es][n] += Dkn*r_Hk[es]; // can move this up

	      r_Aq[es][k] -= r_Fr[es]*Din*s_q[es][j][n];
	      r_Aq[es][k] -= r_Fs[es]*Djn*s_q[es][n][i];
	      r_Aq[es][k] -= r_Ft[es]*Dkn*r_q[es][n];
	    }
	  }
	}
      }
    }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){    

#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

#pragma unroll p_Nq 	    
	    for(int k=0;k<p_Nq;++k){    
	      const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
	      const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
	      
	      const dlong base = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      // move to rhs   (dq/dt = div (c*q) => -div'V*M*c*q
	      rhsq[base+0*p_Np] = -p_half*invJW*r_Aq[es][k];
	    }
	  }
	}
      }
    }
  }
}




@kernel void advectionCombinedHex3D(const dlong Nelements,
				    const dfloat dt,
				    const dfloat rka,
				    const dfloat rkb,
				    @restrict const dfloat * vgeo,
				    @restrict const dfloat * D,
				    @restrict const dfloat * advectionVelocityJW,
				    @restrict const dlong  * vmapM,
				    @restrict const dlong  * vmapP,
				    @restrict const dfloat * advectionVelocityM,
				    @restrict const dfloat * advectionVelocityP,
				    @restrict dfloat * resq,
				    @restrict const dfloat * q,
				    @restrict dfloat * qnew){
  
  // each thread-block outputs p_NblockAdvVol elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockAdvVol;@outer(0)){
    
    // collocation differentiation
    @shared dfloat s_D[p_Nq][p_Nq];
    
    // use 2*Nq^2 shared and 2*Nq*Nq*Nq registers 
    // [ 3D shared would required 3*Nq*Nq*Nq shared ]
    
    @shared dfloat s_F[p_NblockAdvVol][p_Nq][p_Nq];
    @shared dfloat s_G[p_NblockAdvVol][p_Nq][p_Nq];

    @exclusive dfloat r_q[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Aq[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Hk[p_NblockAdvVol];

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

#pragma unroll p_Nq
	    for(int k=0;k<p_Nq;++k){
	      const dlong  qbase = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      r_q[es][k] = q[qbase+0*p_Np];
	    }
	  }

#pragma unroll p_Nq
	  for(int k=0;k<p_Nq;++k){
	    r_Aq[es][k] = 0;
	  }
	}

	s_D[j][i] = D[j*p_Nq+i];
      }
    }
    
#pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
	  
#pragma unroll p_NblockAdvVol
	  for(int es=0;es<p_NblockAdvVol;++es){
	    
	    const dlong e = eo+es;
	    if(e<Nelements){
	      // geometric factors
	      const dlong gbase = e*p_Np*p_dim + k*p_Nq*p_Nq + j*p_Nq + i;

	      // J*W*c_x, J*W*c_y, J*W*c_z
	      const dfloat Fr = advectionVelocityJW[gbase+p_Np*0];
	      const dfloat Fs = advectionVelocityJW[gbase+p_Np*1];
	      const dfloat Ft = advectionVelocityJW[gbase+p_Np*2];
	      
	      const dfloat qn = r_q[es][k];

	      s_F[es][j][i] = Fr*qn;
	      s_G[es][j][i] = Fs*qn;
	      r_Hk[es]      = Ft*qn;
	    }
	  }
	}
      }
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){    

#pragma unroll p_Nq          
          for(int n=0;n<p_Nq;++n){
	    // read D^t
            const dfloat Dni = s_D[n][i]; 
            const dfloat Dnj = s_D[n][j];
            const dfloat Dkn = s_D[k][n];

	    // 6*p_NblockAdvVol flops for 8*3 + p_NblockAdvVol*2*8 bytes from shared

#pragma unroll p_NblockAdvVol
	    for(int es=0;es<p_NblockAdvVol;++es){
	      // MISSING FACTOR OF 0.5 (added below)
	      r_Aq[es][k] += Dni*s_F[es][j][n];
	      r_Aq[es][k] += Dnj*s_G[es][n][i];
	      r_Aq[es][n] += Dkn*r_Hk[es]; // can move this up

	    }
	  }
	}
      }
    }

    // do faces
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){    

	//#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){
	    int k=0;
	    
#pragma unroll p_Nq
	    for(k=0;k<p_Nq;++k){
	      const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
	      const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
	      r_Aq[es][k] *= -invJW; // divide by mass
	    }

	    
	    dlong id, idM, idP;
	    dfloat FM, FP, qM, qP;
	    
	    // do face 0
	    id = e*p_Nfaces*p_Nfp + 0*p_Nfp + j*p_Nq + i;
	    FM = advectionVelocityM[id]; 
	    FP = advectionVelocityP[id];
	    
	    idM = vmapM[id];
	    idP = vmapP[id];

	    qM = r_q[es][0];
	    qP = (idM!=idP) ? q[idP]: -qM;
	    
	    r_Aq[es][0] += FP*qP + FM*qM;
	    
	    // do face 5
	    id = e*p_Nfaces*p_Nfp + 5*p_Nfp + j*p_Nq + i;
	    FM = advectionVelocityM[id];
	    FP = advectionVelocityP[id];
	    
	    idM = vmapM[id];
	    idP = vmapP[id];

	    qM = r_q[es][p_Nq-1];
	    qP = (idM!=idP) ? q[idP]: -qM;
	    
	    r_Aq[es][p_Nq-1] += FP*qP + FM*qM;
	    
	    // do face 1 && face 3
	    if(j==0 || j==p_Nq-1){
	      int face = (j==0) ? 1:3;

#pragma unroll p_Nq
	      for(k=0;k<p_Nq;++k){
		id = e*p_Nfaces*p_Nfp + face*p_Nfp + k*p_Nq + i;

		FM = advectionVelocityM[id]; 
		FP = advectionVelocityP[id];
		
		idM = vmapM[id];
		idP = vmapP[id];
		
		qM = r_q[es][k];
		qP = (idM!=idP) ? q[idP]: -qM;
		
		r_Aq[es][k] += FP*qP + FM*qM;
	      }
	      
	    }

	
	    // do face 2 && face 4	    
	    if(i==0 || i==p_Nq-1){
	      int face = (i==0) ? 4:2;

#pragma unroll p_Nq
	      for(k=0;k<p_Nq;++k){
		id = e*p_Nfaces*p_Nfp + face*p_Nfp + k*p_Nq + j;

		FM = advectionVelocityM[id];
		FP = advectionVelocityP[id];
		
	 	idM = vmapM[id];
		idP = vmapP[id];
		
		qM = r_q[es][k];
		qP = (idM!=idP) ? q[idP]: -qM;
		
		r_Aq[es][k] += FP*qP + FM*qM;
	      }
	    }

#pragma unroll p_Nq 	    
	    for(int k=0;k<p_Nq;++k){    
	      
	      const dlong base = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      dfloat r_resq = resq[base];
	      r_resq = rka*r_resq + dt*r_Aq[es][k];
	      r_q[es][k] += rkb*r_resq;
	      
	      resq[base] = r_resq;
	      qnew[base] = r_q[es][k];
	    }
	  }
	}
      }
    }
  }
}




@kernel void advectionCombinedSkewHex3D(const dlong Nelements,
					const dfloat dt,
					const dfloat rka,
					const dfloat rkb,
					@restrict const dfloat * vgeo,
					@restrict const dfloat * D,
					@restrict const dfloat * advectionVelocityJW,
					@restrict const dlong  * vmapM,
					@restrict const dlong  * vmapP,
					@restrict const dfloat * advectionVelocityM,
					@restrict const dfloat * advectionVelocityP,
					@restrict dfloat * resq,
					@restrict const dfloat * q,
					@restrict dfloat * qnew){
  
  // each thread-block outputs p_NblockAdvVol elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockAdvVol;@outer(0)){
    
    // collocation differentiation
    @shared dfloat s_D[p_Nq][p_Nq];
    
    // use 2*Nq^2 shared and 2*Nq*Nq*Nq registers 
    // [ 3D shared would required 3*Nq*Nq*Nq shared ]
    
    @shared dfloat s_F[p_NblockAdvVol][p_Nq][p_Nq];
    @shared dfloat s_G[p_NblockAdvVol][p_Nq][p_Nq];
    @shared dfloat s_q[p_NblockAdvVol][p_Nq][p_Nq];

    @exclusive dfloat r_q[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Aq[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Hk[p_NblockAdvVol];
    @exclusive dfloat r_Fr[p_NblockAdvVol];
    @exclusive dfloat r_Fs[p_NblockAdvVol];
    @exclusive dfloat r_Ft[p_NblockAdvVol];

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

#pragma unroll p_Nq
	    for(int k=0;k<p_Nq;++k){
	      const dlong  qbase = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      r_q[es][k] = q[qbase+0*p_Np];
	    }
	  }

#pragma unroll p_Nq
	  for(int k=0;k<p_Nq;++k){
	    r_Aq[es][k] = 0;
	  }
	}

	s_D[j][i] = D[j*p_Nq+i];
      }
    }
    
#pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
	  
#pragma unroll p_NblockAdvVol
	  for(int es=0;es<p_NblockAdvVol;++es){
	    
	    const dlong e = eo+es;
	    if(e<Nelements){
	      // geometric factors
	      const dlong gbase = e*p_Np*p_dim + k*p_Nq*p_Nq + j*p_Nq + i;

	      // J*W*c_x, J*W*c_y, J*W*c_z
	      r_Fr[es] = advectionVelocityJW[gbase+p_Np*0];
	      r_Fs[es] = advectionVelocityJW[gbase+p_Np*1];
	      r_Ft[es] = advectionVelocityJW[gbase+p_Np*2];
	      
	      const dfloat qn = r_q[es][k];

	      s_q[es][j][i] = qn;
	      s_F[es][j][i] = r_Fr[es]*qn;
	      s_G[es][j][i] = r_Fs[es]*qn;
	      r_Hk[es]      = r_Ft[es]*qn;
	    }
	  }
	}
      }
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){    

#pragma unroll p_Nq          
          for(int n=0;n<p_Nq;++n){
	    // read D^t
            const dfloat Dni = s_D[n][i]; 
            const dfloat Dnj = s_D[n][j];
            const dfloat Dkn = s_D[k][n];
	    const dfloat Din = s_D[i][n]; 
	    const dfloat Djn = s_D[j][n];

	    // 6*p_NblockAdvVol flops for 8*3 + p_NblockAdvVol*2*8 bytes from shared

#pragma unroll p_NblockAdvVol
	    for(int es=0;es<p_NblockAdvVol;++es){
	      // MISSING FACTOR OF 0.5 (added below)
	      r_Aq[es][k] += Dni*s_F[es][j][n];
	      r_Aq[es][k] += Dnj*s_G[es][n][i];
	      // THIS FEELS WRONG
	      r_Aq[es][n] += Dkn*r_Hk[es]; // can move this up

	      r_Aq[es][k] -= r_Fr[es]*Din*s_q[es][j][n];
	      r_Aq[es][k] -= r_Fs[es]*Djn*s_q[es][n][i];
	      r_Aq[es][k] -= r_Ft[es]*Dkn*r_q[es][n];
	    }
	  }
	}
      }
    }

    // do faces
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){    

	//#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

	    dlong id, idM, idP;
	    dfloat FM, FP, qM, qP;
	    
	    int k=0;


#pragma unroll p_Nq
	    for(k=0;k<p_Nq;++k){
	      const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
	      const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
	      r_Aq[es][k] *= -p_half*invJW; // divide by mass
	    }
	    
	    // do face 0
	    id = e*p_Nfaces*p_Nfp + 0*p_Nfp + j*p_Nq + i;
	    FM = advectionVelocityM[id]; 
	    FP = advectionVelocityP[id];
	    
	    idM = vmapM[id];
	    idP = vmapP[id];

	    qM = r_q[es][0];
	    qP = (idM!=idP) ? q[idP]: -qM;
	    
	    r_Aq[es][0] += FP*qP + FM*qM;

	    // do face 5
	    id = e*p_Nfaces*p_Nfp + 5*p_Nfp + j*p_Nq + i;
	    FM = advectionVelocityM[id];
	    FP = advectionVelocityP[id];
	    
	    idM = vmapM[id];
	    idP = vmapP[id];

	    qM = r_q[es][p_Nq-1];
	    qP = (idM!=idP) ? q[idP]: -qM;
	    
	    r_Aq[es][p_Nq-1] += FP*qP + FM*qM;
	    
	    // do face 1 && face 3
	    if(j==0 || j==p_Nq-1){
	      int face = (j==0) ? 1:3;
	      
	      for(k=0;k<p_Nq;++k){
		id = e*p_Nfaces*p_Nfp + face*p_Nfp + k*p_Nq + i;

		FM = advectionVelocityM[id];
		FP = advectionVelocityP[id];
		
		idM = vmapM[id];
		idP = vmapP[id];
		
		qM = r_q[es][k];
		qP = (idM!=idP) ? q[idP]: -qM;
		
		r_Aq[es][k] += FP*qP + FM*qM;
	      }
	      
	    }

	
	    // do face 2 && face 4	    
	    if(i==0 || i==p_Nq-1){
	      int face = (i==0) ? 4:2;
	      
	      for(k=0;k<p_Nq;++k){
		id = e*p_Nfaces*p_Nfp + face*p_Nfp + k*p_Nq + j;

		FM = advectionVelocityM[id];
		FP = advectionVelocityP[id];
		
	 	idM = vmapM[id];
		idP = vmapP[id];
		
		qM = r_q[es][k];
		qP = (idM!=idP) ? q[idP]: -qM;
		
		r_Aq[es][k] += FP*qP + FM*qM;
	      }
	    }
	    
#pragma unroll p_Nq 	    
	    for(int k=0;k<p_Nq;++k){    
	      const dlong base = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      dfloat r_resq = resq[base];
	      r_resq = rka*r_resq + dt*r_Aq[es][k];
	      r_q[es][k] += rkb*r_resq;
	      
	      resq[base] = r_resq;
	      qnew[base] = r_q[es][k];
	    }
	  }
	}
      }
    }
  }
}


// weak form, with cubature
@kernel void advectionCubatureVolumeHex3D(const dlong Nelements,
					  @restrict const dfloat * vgeo,
					  @restrict const dfloat * cubvgeo,
					  @restrict const dfloat * cubD,
					  @restrict const dfloat * cubInterpT,
					  @restrict const dfloat * cubProjectT,
					  @restrict const dfloat * cubAdvectionVelocityJW,
					  @restrict const dfloat * q,
					  @restrict dfloat * rhsq){
  
  //----------------------------@kernel 1 interpolate velocity fields to quadrature points
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_cubD[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubProjectT[p_cubNq][p_Nq];

    @shared dfloat s_F1[p_cubNq][p_cubNq];
    @shared dfloat s_F2[p_cubNq][p_cubNq];
    @shared dfloat s_F3[p_cubNq][p_cubNq];

    @shared dfloat s_q[p_cubNq][p_cubNq];
    @shared dfloat s_rhsq[p_cubNq][p_cubNq];
    
    @exclusive dfloat r_cq[p_cubNq];
    @exclusive dfloat r_rhsq[p_cubNq];

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){

        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubInterpT[0][id] = cubInterpT[id];
          s_cubProjectT[0][id] = cubProjectT[id];
        }
        s_cubD[0][id] = cubD[id];
	
#pragma unroll p_cubNq
	for(int k=0;k<p_cubNq;++k){         
	  r_cq[k] = 0.;
	  r_rhsq[k] = 0.;
	}
      }
    }

    @barrier("local");

    //read in and interpolate in k
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (i<p_Nq && j<p_Nq) {
#pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            const dfloat qc = q[id];

#pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Ik = s_cubInterpT[k][n];
              r_cq[n] += Ik*qc;
            }
          }
        }
      }
    }
    
    @barrier("local");

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){ 
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (i<p_Nq && j<p_Nq) {
            s_q[j][i] = r_cq[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_cq[k] = 0; 

#pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ii = s_cubInterpT[n][i];
              r_cq[k] += Ii*s_q[j][n];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_q[j][i] = r_cq[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_cq[k] = 0;

          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Ij = s_cubInterpT[n][j];
            r_cq[k] += Ij*s_q[n][i];
          }
        }
      }

      @barrier("local");      
    }

    //#pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){ 

      //fetch slice
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong gid = e*p_cubNp*p_dim+ k*p_cubNq*p_cubNq + j*p_cubNq +i;
          const dfloat cr = cubAdvectionVelocityJW[gid + 0*p_cubNp];
	  const dfloat cs = cubAdvectionVelocityJW[gid + 1*p_cubNp];
	  const dfloat ct = cubAdvectionVelocityJW[gid + 2*p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

          const dfloat qn = r_cq[k];
          const dfloat cqrn = (cr*qn);
          const dfloat cqsn = (cs*qn);
          const dfloat cqtn = (ct*qn);

          s_F1[j][i] = cqrn;
          s_F2[j][i] = cqsn;
          s_F3[j][i] = cqtn;
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Dr = s_cubD[n][i];
              const dfloat Ds = s_cubD[n][j];
              const dfloat Dt = s_cubD[k][n];
              r_rhsq[k] += Dr*s_F1[j][n];
              r_rhsq[k] += Ds*s_F2[n][i];
              r_rhsq[n] += Dt*s_F3[j][i];
            }
	}
      }

      @barrier("local");
    } //k loop

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){ 
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          s_rhsq[j][i] = r_rhsq[k];
        }
      }
      
      @barrier("local");
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_rhsq[k] = 0; 
	    
            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pj = s_cubProjectT[n][j];
              r_rhsq[k] += Pj*s_rhsq[n][i];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_rhsq[j][i] = r_rhsq[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if ((i<p_Nq) && (j<p_Nq)) {
            r_rhsq[k] = 0; 

            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pi = s_cubProjectT[n][i];
              r_rhsq[k] += Pi*s_rhsq[j][n];
            }
          }
        }
      }
      
      @barrier("local");
    }

    //project in k and write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if ((i<p_Nq) && (j<p_Nq)) {
#pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){    
            dfloat rhsqk=0.;

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Pk = s_cubProjectT[n][k];
              rhsqk += Pk*r_rhsq[n];
            }

            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            rhsq[id] = -invJW*rhsqk;
          }
        }
      }
    }
  }
}






