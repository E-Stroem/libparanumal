/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// isotropic advection
@kernel void advectionVolumeHex3D(const dlong Nelements,
				  @restrict const dfloat * vgeo,
				  @restrict const dfloat * D,
				  @restrict const dfloat * advectionVelocityJW,
				  @restrict const dfloat * q,
				  @restrict dfloat * rhsq){
  
  // each thread-block outputs p_NblockAdvVol elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockAdvVol;@outer(0)){

    // collocation differentiation
    @shared dfloat s_D[p_Nq][p_Nq];
    
    // use 2*Nq^2 shared and 2*Nq*Nq*Nq registers 
    // [ 3D shared would required 3*Nq*Nq*Nq shared ]
    
    @shared dfloat s_F[p_NblockAdvVol][p_Nq][p_Nq];
    @shared dfloat s_G[p_NblockAdvVol][p_Nq][p_Nq];

    @exclusive dfloat r_q[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Aq[p_NblockAdvVol][p_Nq];
    @exclusive dfloat r_Hk[p_NblockAdvVol];

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

#pragma unroll p_Nq
	    for(int k=0;k<p_Nq;++k){
	      const dlong  qbase = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      r_q[es][k] = q[qbase+0*p_Np];
	    }
	  }

#pragma unroll p_Nq
	  for(int k=0;k<p_Nq;++k){
	    r_Aq[es][k] = 0;
	  }
	}

	s_D[j][i] = D[j*p_Nq+i];
      }
    }
    
#pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
	  
#pragma unroll p_NblockAdvVol
	  for(int es=0;es<p_NblockAdvVol;++es){
	    
	    const dlong e = eo+es;
	    if(e<Nelements){
	      // geometric factors
	      const dlong gbase = e*p_Np*p_dim + k*p_Nq*p_Nq + j*p_Nq + i;

	      // J*W*c_x, J*W*c_y, J*W*c_z
	      const dfloat Fr = advectionVelocityJW[gbase+p_Np*0];
	      const dfloat Fs = advectionVelocityJW[gbase+p_Np*1];
	      const dfloat Ft = advectionVelocityJW[gbase+p_Np*2];
	      
	      const dfloat qn = r_q[es][k];
	      
	      s_F[es][j][i] = Fr*qn;
	      s_G[es][j][i] = Fs*qn;
	      r_Hk[es]      = Ft*qn;
	    }
	  }
	}
      }
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){    

#pragma unroll p_Nq          
          for(int n=0;n<p_Nq;++n){
	    // read D^t
            const dfloat Dni = s_D[n][i]; 
            const dfloat Dnj = s_D[n][j];
            const dfloat Dkn = s_D[k][n];

	    // 6*p_NblockAdvVol flops for 8*3 + p_NblockAdvVol*2*8 bytes from shared

#pragma unroll p_NblockAdvVol
	    for(int es=0;es<p_NblockAdvVol;++es){	    
	      r_Aq[es][k] += Dni*s_F[es][j][n];
	      r_Aq[es][k] += Dnj*s_G[es][n][i];
	      r_Aq[es][n] += Dkn*r_Hk[es]; // can move this up
	    }
          }
	}
      }
    }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){    

#pragma unroll p_NblockAdvVol
	for(int es=0;es<p_NblockAdvVol;++es){
	  
	  const dlong e = eo+es;
	  if(e<Nelements){

#pragma unroll p_Nq 	    
	    for(int k=0;k<p_Nq;++k){    
	      const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
	      const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
	      
	      const dlong base = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	      
	      // move to rhs   (dq/dt = div (c*q) => -div'V*M*c*q
	      rhsq[base+0*p_Np] = -invJW*r_Aq[es][k];
	    }
	  }
	}
      }
    }
  }
}


