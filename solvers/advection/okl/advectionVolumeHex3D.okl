/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

@kernel void advectionNodalWeakSEMDGVolumeHex3D(const dlong Nelements,
						@restrict const dfloat * vgeo,
						@restrict const dfloat * D,
						@restrict const dfloat *  advectionVelocityJW,
						@restrict const dfloat * q,
						@restrict dfloat * rhsq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    
    @shared    dfloat s_q[p_Nq][p_Nq][p_Nq];
    @exclusive dfloat r_tmpi[p_Nq], r_tmpj[p_Nq], r_tmpk[p_Nq];

    @shared    dfloat s_D[p_Nq][p_Nq];
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	//#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){
	  dlong base = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  s_q[k][j][i] = q[base];
	}

	int n = j*p_Nq + i;
	s_D[0][n] = D[n];
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_tmpi[m] = 0; r_tmpj[m] = 0; r_tmpk[m] = 0;
	}

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  
	  dfloat r_qi = s_q[b][a][c]; // this is sloppy (5 reads, 6 flops => 13*6/(5*8) TFLOPS)
	  dfloat r_qj = s_q[b][c][a];
	  dfloat r_qk = s_q[c][b][a];
	  
	  // Cc*Jc*wc*Ic*q
	  const dlong gid = 3*e*p_Nq*p_Nq*p_Nq + c*p_Nq*p_Nq + b*p_Nq + a;
	  const dfloat Cr = advectionVelocityJW[gid + 0*p_Nq*p_Nq*p_Nq];
	  const dfloat Cs = advectionVelocityJW[gid + 1*p_Nq*p_Nq*p_Nq];
	  const dfloat Ct = advectionVelocityJW[gid + 2*p_Nq*p_Nq*p_Nq];
	  
	  r_qi *= Cr;
	  r_qj *= Cs;
	  r_qk *= Ct;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Dcn = s_D[c][n];
	    
	    r_tmpi[n] += Dcn*r_qi;
	    r_tmpj[n] += Dcn*r_qj;
	    r_tmpk[n] += Dcn*r_qk;
	  }
	} // end c loop
	
      } // end a
    } // end b
    
    // THIS BARRIER IS IMPORTANT ???
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][a][c] = r_tmpi[c];
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][c][a] += r_tmpj[c];
	}
      }
    }
    
    @barrier("local");

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  const dlong gid = p_Nvgeo*e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a + p_IJWID*p_Np;
	  const dfloat invJW = vgeo[gid];
	  
	  const dfloat qbca = s_q[c][b][a] + r_tmpk[c];

	  const dlong id = e*p_Np + c*p_Nq*p_Nq +  b*p_Nq + a;
	  rhsq[id] = -invJW*qbca; // note sign 
	}
      }
    }
  }
}

@kernel void advectionCombinedNodalWeakSEMDGVolumeHex3D(const dlong Nelements,
							@restrict const dlong * elementIds,
							const dfloat dt,
							const dfloat rka,
							const dfloat rkb,
							@restrict const dfloat * vgeo,
							@restrict const dfloat * D,
							@restrict const dfloat *  advectionVelocityJW,
							@restrict const dlong  * vmapM,
							@restrict const dlong  * tmapP,
							@restrict const dfloat * advectionVelocityM,
							@restrict const dfloat * advectionVelocityP,
							@restrict dfloat * resq,
							@restrict const dfloat * q,
							@restrict dfloat * qnew){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {


    @exclusive dlong  r_e;
    @shared    dfloat s_q[p_Nq][p_Nq][p_Nq];
    @exclusive dfloat r_tmpi[p_Nq], r_tmpj[p_Nq], r_tmpk[p_Nq];

    @shared    dfloat s_D[p_Nq][p_Nq];
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	r_e = elementIds[e];
	//#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){
	  dlong base = r_e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  s_q[k][j][i] = q[base];
	}

	int n = j*p_Nq + i;
	s_D[0][n] = D[n];
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_tmpi[m] = 0; r_tmpj[m] = 0; r_tmpk[m] = 0;
	}

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  
	  dfloat r_qi = s_q[b][a][c]; // this is sloppy (5 reads, 6 flops => 13*6/(5*8) TFLOPS)
	  dfloat r_qj = s_q[b][c][a];
	  dfloat r_qk = s_q[c][b][a];
	  
	  // Cc*Jc*wc*Ic*q
	  const dlong gid = 3*r_e*p_Nq*p_Nq*p_Nq + c*p_Nq*p_Nq + b*p_Nq + a;
	  const dfloat Cr = advectionVelocityJW[gid + 0*p_Nq*p_Nq*p_Nq];
	  const dfloat Cs = advectionVelocityJW[gid + 1*p_Nq*p_Nq*p_Nq];
	  const dfloat Ct = advectionVelocityJW[gid + 2*p_Nq*p_Nq*p_Nq];
	  
	  r_qi *= Cr;
	  r_qj *= Cs;
	  r_qk *= Ct;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Dcn = s_D[c][n];
	    
	    r_tmpi[n] += Dcn*r_qi;
	    r_tmpj[n] += Dcn*r_qj;
	    r_tmpk[n] += Dcn*r_qk;
	  }
	} // end c loop
	
      } // end a
    } // end b
    
    // THIS BARRIER IS IMPORTANT ???
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][a][c] = r_tmpi[c];
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][c][a] += r_tmpj[c];
	}
      }
    }
    
    @barrier("local");

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  const dlong gid = p_Nvgeo*r_e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a + p_IJWID*p_Np;
	  const dfloat invJW = vgeo[gid];
	  
	  const dfloat qbca = s_q[c][b][a] + r_tmpk[c];
	  s_q[c][b][a] = -invJW*qbca;
	}
      }
    }

    @barrier("local");

    for(int f=0;f<p_Nfaces;++f){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){     
	  const dlong id = r_e*p_Nfaces*p_Nfp + f*p_Nfp + j*p_Nq + i;

	  const dfloat FM = advectionVelocityM[id]; 
	  const dfloat FP = advectionVelocityP[id];
	  
	  const dlong idM = vmapM[id];
	  const dlong idP = tmapP[id];

	  const dfloat qM = q[idM];
	  const dfloat qP = (idM!=idP) ? q[idP]:-qM;
	  const int vidM = idM%p_Np;
	  s_q[0][0][vidM] += FP*qP + FM*qM;
	}
      }
      @barrier("local");
    }

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  const dlong base = r_e*p_Np*p_Nfields + c*p_Nq*p_Nq + b*p_Nq + a;

	  dfloat r_qcba = q[base];
	  dfloat r_resq = resq[base];
	  r_resq = rka*r_resq + dt*s_q[c][b][a];
	  r_qcba += rkb*r_resq;
	  
	  resq[base] = r_resq;
	  qnew[base] = r_qcba;
	}
      }
    }
  }
}




// reduced use of local
@kernel void advectionCubatureWeakSEMDGVolumeHex3D(const dlong Nelements,
						  @restrict const dfloat * vgeo,
						  @restrict const dfloat * cubvgeo,
						  @restrict const dfloat * cubD,
						  @restrict const dfloat * cubInterpT,
						  @restrict const dfloat * cubProjectT,
						  @restrict const dfloat * cubAdvectionVelocityJW,
						  @restrict const dfloat * q,
						  @restrict dfloat * rhsq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    
    @shared    dfloat s_q[p_Nq][p_Nq][p_Nq];
    @exclusive dfloat r_tmpi[p_Nq], r_tmpj[p_Nq], r_tmpk[p_Nq];

    @shared    dfloat s_D[p_cubNq][p_Nq], s_I[p_cubNq][p_Nq];
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	//#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){
	  dlong base = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  s_q[k][j][i] = q[base];
	}

	int n = j*p_Nq + i;
	while(n<p_cubNq*p_Nq){
	  s_I[0][n] = cubInterpT[n];
	  s_D[0][n] = cubD[n];
	  n+=p_Nq*p_Nq;
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_tmpi[m] = 0; r_tmpj[m] = 0; r_tmpk[m] = 0;
	}

	//#pragma unroll p_cubNq
	for(int c=0;c<p_cubNq;++c){
	  
	  dfloat r_Iqi = 0, r_Iqj = 0, r_Iqk = 0;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Icn = s_I[c][n];

	    const dfloat r_qi = s_q[b][a][n]; // this is sloppy (5 reads, 6 flops => 13*6/(5*8) TFLOPS)
	    const dfloat r_qj = s_q[b][n][a];
	    const dfloat r_qk = s_q[n][b][a];
	    
	    r_Iqi += Icn*r_qi;
	    r_Iqj += Icn*r_qj;
	    r_Iqk += Icn*r_qk;

	  }
	  
	  // Cc*Jc*wc*Ic*q
	  const dlong gid = 3*e*p_Nq*p_Nq*p_cubNq + c*p_Nq*p_Nq + b*p_Nq + a;
	  const dfloat cr = cubAdvectionVelocityJW[gid + 0*p_Nq*p_Nq*p_cubNq];
	  const dfloat cs = cubAdvectionVelocityJW[gid + 1*p_Nq*p_Nq*p_cubNq];
	  const dfloat ct = cubAdvectionVelocityJW[gid + 2*p_Nq*p_Nq*p_cubNq];
	  
	  r_Iqi *= cr;
	  r_Iqj *= cs;
	  r_Iqk *= ct;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Dcn = s_D[c][n];
	    
	    r_tmpi[n] += Dcn*r_Iqi;
	    r_tmpj[n] += Dcn*r_Iqj;
	    r_tmpk[n] += Dcn*r_Iqk;
	  }
	} // end c loop
	
      } // end a
    } // end b
    
    // THIS BARRIER IS IMPORTANT ???
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][a][c] = r_tmpi[c];
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][c][a] += r_tmpj[c];
	}
      }
    }
    
    @barrier("local");

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  const dlong gid = p_Nvgeo*e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a + p_IJWID*p_Np;
	  const dfloat invJW = vgeo[gid];
	  
	  const dfloat qbca = s_q[c][b][a] + r_tmpk[c];

	  const dlong id = e*p_Np + c*p_Nq*p_Nq +  b*p_Nq + a;
	  rhsq[id] = -invJW*qbca; // note sign 
	}
      }
    }
  }
}


// reduced use of local
@kernel void advectionNodalSkewSEMDGVolumeHex3D(const dlong Nelements,
						@restrict const dfloat * vgeo,
						@restrict const dfloat * D,
						@restrict const dfloat * advectionVelocityJW,
						@restrict const dfloat * q,
						@restrict dfloat * rhsq){

  // unrolling was necessary for N=9
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    
    @shared    dfloat s_q[p_Nq][p_Nq][p_Nq];
    @exclusive dfloat r_tmpi[p_Nq], r_tmpj[p_Nq], r_tmpk[p_Nq];

    @shared    dfloat s_D[p_Nq][p_Nq];
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){
	  dlong base = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  s_q[k][j][i] = q[base];
	}

	int n = j*p_Nq + i;
	s_D[0][n] = D[n];

#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_tmpi[m] = 0; r_tmpj[m] = 0; r_tmpk[m] = 0;
	}

      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){

	  // Cc*Jc*wc*Ic*q
	  const dlong gid = 3*e*p_Nq*p_Nq*p_Nq + c*p_Nq*p_Nq + b*p_Nq + a;
	  const dfloat cr = advectionVelocityJW[gid + 0*p_Nq*p_Nq*p_Nq];
	  const dfloat cs = advectionVelocityJW[gid + 1*p_Nq*p_Nq*p_Nq];
	  const dfloat ct = advectionVelocityJW[gid + 2*p_Nq*p_Nq*p_Nq];
	  
	  //     (1/JW)*(-D_{cn}*(J_c*W_c*C_c)*q_c +  (J_n*W_n*C_n)*D_{nc}*q_c)
	  
#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat qi = s_q[b][a][n];
	    const dfloat qj = s_q[b][n][a];
	    const dfloat qk = s_q[n][b][a];	    

	    const dfloat Dcn = s_D[c][n];

	    const dfloat tmpi = Dcn*cr*qi;
	    const dfloat tmpj = Dcn*cs*qj;
	    const dfloat tmpk = Dcn*ct*qk;
	    
	    r_tmpi[c] += tmpi;
	    r_tmpj[c] += tmpj;
	    r_tmpk[c] += tmpk;

	    r_tmpi[n] -= tmpi;
	    r_tmpj[n] -= tmpj;
	    r_tmpk[n] -= tmpk;
	  }
	  
	} // end c loop
      }
    } // end b loop
    
    // adding this barrier improves performance ??????????????????//
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][a][c] = r_tmpi[c];
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][c][a] += r_tmpj[c];
	}
      }
    }
    
    @barrier("local");

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){

	  const dlong gid = p_Nvgeo*e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a + p_IJWID*p_Np;
	  const dfloat invJW = vgeo[gid];
	  
	  const dfloat qbca = s_q[c][b][a] + r_tmpk[c];
	  const dlong id = e*p_Np + c*p_Nq*p_Nq +  b*p_Nq + a;
	  
	  rhsq[id] = p_half*invJW*qbca;
	}
      }
    }
  }
}


// reduced use of local
@kernel void advectionCubatureSkewSEMDGVolumeHex3D(const dlong Nelements,
						  @restrict const dfloat * vgeo,
						  @restrict const dfloat * cubvgeo,
						  @restrict const dfloat * cubD,
						  @restrict const dfloat * cubInterpT,
						  @restrict const dfloat * cubProjectT,
						  @restrict const dfloat * cubAdvectionVelocityJW,
						  @restrict const dfloat * q,
						  @restrict dfloat * rhsq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    
    @shared    dfloat s_q[p_Nq][p_Nq][p_Nq];
    @exclusive dfloat r_tmpi[p_Nq], r_tmpj[p_Nq], r_tmpk[p_Nq];

    @shared    dfloat s_D[p_cubNq][p_Nq], s_I[p_cubNq][p_Nq];
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	//#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){
	  dlong base = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  s_q[k][j][i] = q[base];
	}

	int n = j*p_Nq + i;
	while(n<p_cubNq*p_Nq){
	  s_I[0][n] = cubInterpT[n];
	  s_D[0][n] = cubD[n];
	  n+=p_Nq*p_Nq;
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_tmpi[m] = 0; r_tmpj[m] = 0; r_tmpk[m] = 0;
	}

	//#pragma unroll p_cubNq
	for(int c=0;c<p_cubNq;++c){
	  
	  dfloat r_Iqi = 0, r_Iqj = 0, r_Iqk = 0;
	  dfloat r_Dqi = 0, r_Dqj = 0, r_Dqk = 0;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Icn = s_I[c][n];
	    const dfloat Dcn = s_D[c][n];

	    const dfloat r_qi = s_q[b][a][n]; // this is sloppy (5 reads, 6 flops => 13*6/(5*8) TFLOPS)
	    const dfloat r_qj = s_q[b][n][a];
	    const dfloat r_qk = s_q[n][b][a];
	    
	    r_Iqi += Icn*r_qi;
	    r_Iqj += Icn*r_qj;
	    r_Iqk += Icn*r_qk;

	    r_Dqi += Dcn*r_qi;
	    r_Dqj += Dcn*r_qj;
	    r_Dqk += Dcn*r_qk;
	  }
	  
	  // Cc*Jc*wc*Ic*q
	  const dlong gid = 3*e*p_Nq*p_Nq*p_cubNq + c*p_Nq*p_Nq + b*p_Nq + a;
	  const dfloat cr = cubAdvectionVelocityJW[gid + 0*p_Nq*p_Nq*p_cubNq];
	  const dfloat cs = cubAdvectionVelocityJW[gid + 1*p_Nq*p_Nq*p_cubNq];
	  const dfloat ct = cubAdvectionVelocityJW[gid + 2*p_Nq*p_Nq*p_cubNq];
	  
	  r_Iqi *= cr;
	  r_Iqj *= cs;
	  r_Iqk *= ct;

	  r_Dqi *= cr;
	  r_Dqj *= cs;
	  r_Dqk *= ct;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Icn = s_I[c][n];
	    const dfloat Dcn = s_D[c][n];
	    
	    r_tmpi[n] += Icn*r_Dqi;
	    r_tmpj[n] += Icn*r_Dqj;
	    r_tmpk[n] += Icn*r_Dqk;
	    
	    r_tmpi[n] -= Dcn*r_Iqi;
	    r_tmpj[n] -= Dcn*r_Iqj;
	    r_tmpk[n] -= Dcn*r_Iqk;
	  }
	} // end c loop

      }
    } // end b loop
    
    // adding this barrier improves performance ??????????????????//
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][a][c] = r_tmpi[c];
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][c][a] += r_tmpj[c];
	}
      }
    }
    
    @barrier("local");

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){

	  const dlong gid = p_Nvgeo*e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a + p_IJWID*p_Np;
	  const dfloat invJW = vgeo[gid];
	  
	  const dfloat qbca = s_q[c][b][a] + r_tmpk[c];
	  const dlong id = e*p_Np + c*p_Nq*p_Nq +  b*p_Nq + a;
	  
	  rhsq[id] = p_half*invJW*qbca;
	}
      }
    }
  }
}





// reduced use of local
@kernel void advectionCubatureWeakWADGVolumeHex3D(const dlong Nelements,
						  @restrict const dfloat * vgeo,
						  @restrict const dfloat * cubvgeo,
						  @restrict const dfloat * cubD,
						  @restrict const dfloat * cubInterpT,
						  @restrict const dfloat * cubProjectT,
						  @restrict const dfloat * cubAdvectionVelocityJW,
						  @restrict const dfloat * q,
						  @restrict dfloat * rhsq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    
    @shared    dfloat s_q[p_Nq][p_Nq][p_Nq];
    @exclusive dfloat r_tmpi[p_Nq], r_tmpj[p_Nq], r_tmpk[p_Nq];
    @exclusive dfloat r_resqi[p_Nq], r_resqj[p_Nq], r_resqk[p_Nq];

    @shared    dfloat s_P[p_Nq][p_cubNq], s_D[p_cubNq][p_Nq], s_I[p_cubNq][p_Nq];
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	//#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){
	  dlong base = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  s_q[k][j][i] = q[base];
	}

	int n = j*p_Nq + i;
	while(n<p_cubNq*p_Nq){
	  s_P[0][n] = cubProjectT[n];
	  s_I[0][n] = cubInterpT[n];
	  s_D[0][n] = cubD[n];
	  n+=p_Nq*p_Nq;
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_tmpi[m] = 0; r_tmpj[m] = 0; r_tmpk[m] = 0;
	}

	//#pragma unroll p_cubNq
	for(int c=0;c<p_cubNq;++c){
	  
	  dfloat r_Iqi = 0, r_Iqj = 0, r_Iqk = 0;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Icn = s_I[c][n];

	    const dfloat r_qi = s_q[b][a][n]; // this is sloppy (5 reads, 6 flops => 13*6/(5*8) TFLOPS)
	    const dfloat r_qj = s_q[b][n][a];
	    const dfloat r_qk = s_q[n][b][a];
	    
	    r_Iqi += Icn*r_qi;
	    r_Iqj += Icn*r_qj;
	    r_Iqk += Icn*r_qk;

	  }
	  
	  // Cc*Jc*wc*Ic*q
  	  const dlong gid = 3*e*p_Nq*p_Nq*p_cubNq + c*p_Nq*p_Nq + b*p_Nq + a;	
	  const dfloat cr = cubAdvectionVelocityJW[gid + 0*p_Nq*p_Nq*p_cubNq];
	  const dfloat cs = cubAdvectionVelocityJW[gid + 1*p_Nq*p_Nq*p_cubNq];
	  const dfloat ct = cubAdvectionVelocityJW[gid + 2*p_Nq*p_Nq*p_cubNq];
	  
	  r_Iqi *= cr;
	  r_Iqj *= cs;
	  r_Iqk *= ct;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Dcn = s_D[c][n];
	    
	    r_tmpi[n] += Dcn*r_Iqi;
	    r_tmpj[n] += Dcn*r_Iqj;
	    r_tmpk[n] += Dcn*r_Iqk;
	  }
	} // end c loop

      }
    } // end b loop
    
    // adding this barrier improves performance ??????????????????//
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_resqi[m] = 0; r_resqj[m] = 0; r_resqk[m] = 0;
	}

	//#pragma unroll p_cubNq
	for(int m=0;m<p_cubNq;++m){

	  dfloat r_Pi = 0, r_Pj = 0, r_Pk = 0;
	  
	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Pnm = s_P[n][m];
	    r_Pi += Pnm*r_tmpi[n];
	    r_Pj += Pnm*r_tmpj[n];
	    r_Pk += Pnm*r_tmpk[n];
	  }

	  // fix this later - will multiply by 1/J
	  const dlong base = 3*e*p_Nq*p_Nq*p_cubNq + m*p_Nq*p_Nq + b*p_Nq + a;
	  
	  r_Pi *= cubvgeo[base+0*p_Nq*p_Nq*p_cubNq];
	  r_Pj *= cubvgeo[base+1*p_Nq*p_Nq*p_cubNq];
	  r_Pk *= cubvgeo[base+2*p_Nq*p_Nq*p_cubNq];
	  
	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    
	    // all threads reas the same
	    const dfloat Pmn = s_P[n][m];  // 6 flops for 8 bytes (12*6/8 TFLOPS/s)
	    r_resqi[n] += Pmn*r_Pi;
	    r_resqj[n] += Pmn*r_Pj;
	    r_resqk[n] += Pmn*r_Pk;
	  }
	}
	
      } // end a
    } // end b

    // THIS BARRIER IS IMPORTANT ???
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][a][c] = r_resqi[c];
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][c][a] += r_resqj[c];
	}
      }
    }
    
    @barrier("local");

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  
	  const dfloat qbca = s_q[c][b][a] + r_resqk[c];
	  const dlong id = e*p_Np + c*p_Nq*p_Nq +  b*p_Nq + a;
	  
	  rhsq[id] = -qbca; // note sign
	}
      }
    }
  }
}




// reduced use of local
@kernel void advectionCubatureSkewWADGVolumeHex3D(const dlong Nelements,
						  @restrict const dfloat * vgeo,
						  @restrict const dfloat * cubvgeo,
						  @restrict const dfloat * cubD,
						  @restrict const dfloat * cubInterpT,
						  @restrict const dfloat * cubProjectT,
						  @restrict const dfloat * cubAdvectionVelocityJW,
						  @restrict const dfloat * q,
						  @restrict dfloat * rhsq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    
    @shared    dfloat s_q[p_Nq][p_Nq][p_Nq];
    @exclusive dfloat r_tmpi[p_Nq], r_tmpj[p_Nq], r_tmpk[p_Nq];
    @exclusive dfloat r_resqi[p_Nq], r_resqj[p_Nq], r_resqk[p_Nq];

    @shared    dfloat s_P[p_Nq][p_cubNq], s_D[p_cubNq][p_Nq], s_I[p_cubNq][p_Nq];
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	//#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){
	  dlong base = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  s_q[k][j][i] = q[base];
	}

	int n = j*p_Nq + i;
	while(n<p_cubNq*p_Nq){
	  s_P[0][n] = cubProjectT[n];
	  s_I[0][n] = cubInterpT[n];
	  s_D[0][n] = cubD[n];
	  n+=p_Nq*p_Nq;
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

#if 0
    // wrong size
	for(int c=0;c<p_cubNq;++c){
	  r_resqi[c] = s_q[b][a][c]; // this is sloppy (5 reads, 6 flops => 13*6/(5*8) TFLOPS)
	  r_resqj[c] = s_q[b][c][a];
	  r_resqk[c] = s_q[c][b][a];
	}
#endif	
	//#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_tmpi[m] = 0; r_tmpj[m] = 0; r_tmpk[m] = 0;
	}

	//#pragma unroll p_cubNq
	for(int c=0;c<p_cubNq;++c){
	  
	  dfloat r_Iqi = 0, r_Iqj = 0, r_Iqk = 0;
	  dfloat r_Dqi = 0, r_Dqj = 0, r_Dqk = 0;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Icn = s_I[c][n];
	    const dfloat Dcn = s_D[c][n];

#if 1
	    const dfloat r_qi = s_q[b][a][n]; // this is sloppy (5 reads, 6 flops => 13*6/(5*8) TFLOPS)
	    const dfloat r_qj = s_q[b][n][a];
	    const dfloat r_qk = s_q[n][b][a];
#else
	    const dfloat r_qi = r_resqi[n];
	    const dfloat r_qj = r_resqj[n];
	    const dfloat r_qk = r_resqk[n];
#endif
	    
	    r_Iqi += Icn*r_qi;
	    r_Iqj += Icn*r_qj;
	    r_Iqk += Icn*r_qk;

	    r_Dqi += Dcn*r_qi;
	    r_Dqj += Dcn*r_qj;
	    r_Dqk += Dcn*r_qk;
	  }
	  
	  // Cc*Jc*wc*Ic*q
  	  const dlong gid = 3*e*p_Nq*p_Nq*p_cubNq + c*p_Nq*p_Nq + b*p_Nq + a;	
	  const dfloat cr = cubAdvectionVelocityJW[gid + 0*p_Nq*p_Nq*p_cubNq];
	  const dfloat cs = cubAdvectionVelocityJW[gid + 1*p_Nq*p_Nq*p_cubNq];
	  const dfloat ct = cubAdvectionVelocityJW[gid + 2*p_Nq*p_Nq*p_cubNq];
	  
	  r_Iqi *= cr;
	  r_Iqj *= cs;
	  r_Iqk *= ct;

	  r_Dqi *= cr;
	  r_Dqj *= cs;
	  r_Dqk *= ct;

	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Icn = s_I[c][n];
	    const dfloat Dcn = s_D[c][n];
	    
	    r_tmpi[n] += Icn*r_Dqi;
	    r_tmpj[n] += Icn*r_Dqj;
	    r_tmpk[n] += Icn*r_Dqk;
	    
	    r_tmpi[n] -= Dcn*r_Iqi;
	    r_tmpj[n] -= Dcn*r_Iqj;
	    r_tmpk[n] -= Dcn*r_Iqk;
	  }
	} // end c loop

      }
    } // end b loop
    
    // adding this barrier improves performance ??????????????????//
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int m=0;m<p_Nq;++m){
	  r_resqi[m] = 0; r_resqj[m] = 0; r_resqk[m] = 0;
	}

	//#pragma unroll p_cubNq
	for(int m=0;m<p_cubNq;++m){

	  dfloat r_Pi = 0, r_Pj = 0, r_Pk = 0;
	  
	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Pnm = s_P[n][m];
	    r_Pi += Pnm*r_tmpi[n];
	    r_Pj += Pnm*r_tmpj[n];
	    r_Pk += Pnm*r_tmpk[n];
	  }

	  // fix this later - will multiply by 1/J
	  const dlong base = 3*e*p_Nq*p_Nq*p_cubNq + m*p_Nq*p_Nq + b*p_Nq + a;	
	  
	  r_Pi *= cubvgeo[base+0*p_Nq*p_Nq*p_cubNq];
	  r_Pj *= cubvgeo[base+1*p_Nq*p_Nq*p_cubNq];
	  r_Pk *= cubvgeo[base+2*p_Nq*p_Nq*p_cubNq];
	  
	  //#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    
	    // all threads reas the same
	    const dfloat Pmn = s_P[n][m];  // 6 flops for 8 bytes (12*6/8 TFLOPS/s)
	    r_resqi[n] += Pmn*r_Pi;
	    r_resqj[n] += Pmn*r_Pj;
	    r_resqk[n] += Pmn*r_Pk;
	  }
	}
	
      } // end a
    } // end b

    // THIS BARRIER IS IMPORTANT ???
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][a][c] = r_resqi[c];
	}
      }
    }
    
    @barrier("local");
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){
	
	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  s_q[b][c][a] += r_resqj[c];
	}
      }
    }
    
    @barrier("local");

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	//#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){
	  
	  const dfloat qbca = s_q[c][b][a] + r_resqk[c];
	  const dlong id = e*p_Np + c*p_Nq*p_Nq +  b*p_Nq + a;
	  
	  rhsq[id] = p_half*qbca;
	}
      }
    }
  }
}

