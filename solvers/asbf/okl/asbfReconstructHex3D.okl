
@kernel void asbfReconstuctHex3D(const dlong int Nelements,
				 const dlong int Ntotal2D,
				 @restrict const dfloat *asbfBgll,
				 @restrict const dfloat *qmodes,
				 @restrict       dfloat *q){
  

  // reconstruct SEM3D solution from mode slices
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    
    @shared dfloat s_Bgll[p_Nq][p_asbfNmodes];

    for(int n=0;n<p_Nq*p_Nq;++n;@inner(0)){
      int m=n;
      while(m<p_Nq*p_asbfNmodes){
	s_Bgll[0][m] = asbfBgll[m];
	m+=p_Nq*p_Nq;
      }
    }
    
    for(int n=0;n<p_Nq*p_Nq;++n;@inner(0)){

      dlong id = e*p_Nq*p_Nq + n;
      dfloat qpencil[p_asbfNmodes];

#pragma unroll p_asbfNmodes
      for(int m=0;m<p_asbfNmodes;++m){
	qpencil[m] = qmodes[id];
	id += Ntotal2D;
      }
      
      // interpolate from asbf to gll nodes
#pragma unroll p_Nq
      for(int m=0;m<p_Nq;++m){
	dfloat qm = 0;

#pragma unroll p_asbfNmodes
	for(int i=0;i<p_asbfNmodes;++i){
	  qm += s_Bgll[m][i]*qpencil[m]; // broadcast from shared
	}
	
	// assume Nfields=1
	q[e*p_Nq*p_Nq*p_Nq + m*p_Nq*p_Nq + m] = qm;
      }
    }
  }
}
