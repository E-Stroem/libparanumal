/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/



// compute div(NU)  = div(uxu) in collocation way (weak form)
@kernel void insAdvectionVolumeQuad3D(const dlong Nelements,
				      @restrict const  dfloat *  vgeo,
				      @restrict const  dfloat *  D,
				      const dlong offset,
				      @restrict const  dfloat *  U,
				      @restrict dfloat *  NU){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_F11[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F12[p_NblockV][p_Nq][p_Nq];
    // @shared dfloat s_F13[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F21[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F22[p_NblockV][p_Nq][p_Nq];
    // @shared dfloat s_F23[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F31[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F32[p_NblockV][p_Nq][p_Nq];
    // @shared dfloat s_F33[p_NblockV][p_Nq][p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){    
          const dlong e = eo+es; // element in block
          if(e<Nelements){ 
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat drdz = vgeo[gid + p_RZID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
            const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
            const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
            const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
            const dfloat dtdz = vgeo[gid + p_TZID*p_Np];

            const dfloat JW   = vgeo[gid + p_JWID*p_Np];

            const dlong id = e*p_Np + j*p_Nq + i;

            const dfloat Un = U[id+0*offset];
            const dfloat Vn = U[id+1*offset];
            const dfloat Wn = U[id+2*offset];

            const dfloat cUn = JW*(drdx*Un + drdy*Vn + drdz*Wn);
            const dfloat cVn = JW*(dsdx*Un + dsdy*Vn + dsdz*Wn);
            // const dfloat cWn = JW*(dtdx*Un + dtdy*Vn + dtdz*Wn);

            s_F11[es][j][i] = cUn*Un;
            s_F12[es][j][i] = cVn*Un;
            // s_F13[es][j][i] = cWn*Un;
            s_F21[es][j][i] = cUn*Vn;
            s_F22[es][j][i] = cVn*Vn;
            // s_F23[es][j][i] = cWn*Vn;
            s_F31[es][j][i] = cUn*Wn;
            s_F32[es][j][i] = cVn*Wn;
            // s_F33[es][j][i] = cWn*Wn;

            if (es==0)
              s_D[j][i] = D[j*p_Nq+i];
          }
        }
      }
    }

    // Make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(2)){ 
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){  
          const dlong e = eo+es; 
          if(e<Nelements){ 
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

	    // preload low order terms
            // dfloat nu = s_F13[es][j][i];
            // dfloat nv = s_F23[es][j][i];
            // dfloat nw = s_F33[es][j][i];
            dfloat nu = 0.f;
            dfloat nv = 0.f;
            dfloat nw = 0.f;

#pragma unroll p_Nq
            for(int n=0;n<p_Nq;++n){
              const dfloat Dr = s_D[n][i];
              const dfloat Ds = s_D[n][j];

	             nu += Dr*s_F11[es][j][n]+Ds*s_F12[es][n][i];
	             nv += Dr*s_F21[es][j][n]+Ds*s_F22[es][n][i];
	             // nw += Dr*s_F31[es][j][n]+Ds*s_F32[es][n][i];
            }

            const dlong id = e*p_Np + j*p_Nq + i;
            NU[id+0*offset] = -invJW*nu;
            NU[id+1*offset] = -invJW*nv;
            NU[id+2*offset] = -invJW*nw;
          }
        }
      }
    }
  }  
}




void surfaceTerms(dlong e, int es, dlong offset, int sk, int face, int i, int j, dfloat time,
                  @global const dfloat *x,
                  @global const dfloat *y, 
                  @global const dfloat *z, 
                  @global const dfloat *sgeo,
                  @global const dlong *vmapM,
                  @global const dlong *vmapP,
                  @global const dfloat *U,
                  @shared dfloat s_fluxNU[p_NblockS][p_Nq][p_Nq],
                  @shared dfloat s_fluxNV[p_NblockS][p_Nq][p_Nq],
                  @shared dfloat s_fluxNW[p_NblockS][p_Nq][p_Nq]){
  
  const dlong  idM = vmapM[sk];                                         
  const dlong  idP = vmapP[sk];                                         
  
  const dfloat nx    = sgeo[sk*p_Nsgeo+p_NXID];                            
  const dfloat ny    = sgeo[sk*p_Nsgeo+p_NYID];                            
  const dfloat nz    = sgeo[sk*p_Nsgeo+p_NZID];                            
  const dfloat sJ    = sgeo[sk*p_Nsgeo+p_SJID];                            
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        
  
  const dfloat  uM = U[idM+0*offset], vM = U[idM+1*offset], wM = U[idM+2*offset];             
  dfloat  uP = U[idP+0*offset], vP = U[idP+1*offset], wP = U[idP+2*offset];             
  
  
  const dfloat unM   = fabs(nx*uM + ny*vM + nz*wM);                         
  const dfloat unP   = fabs(nx*uP + ny*vP + nz*wP);                         
  const dfloat unMax = (unM > unP) ? unM : unP;                         
                                                                        
  const dfloat sc = invWJ * sJ;                                         
  s_fluxNU[es][j][i] +=
    sc*(.5f*(nx*(uP*uP + uM*uM) + ny*(uP*vP + uM*vM) + nz*(uP*wP + uM*wM)  + unMax*(uM-uP) ));

  s_fluxNV[es][j][i] +=
    sc*(.5f*(nx*(vP*uP + vM*uM) + ny*(vP*vP + vM*vM) + nz*(vP*wP + vM*wM)  + unMax*(vM-vP) ));
  
  s_fluxNW[es][j][i] +=
    sc*(.5f*(nx*(wP*uP + wM*uM) + ny*(wP*vP + wM*vM) + nz*(wP*wP + wM*wM)  + unMax*(wM-wP) ));
}

@kernel void insAdvectionSurfaceQuad3D(const dlong Nelements,
				       @restrict const  dfloat *  sgeo,
				       @restrict const  dfloat *  LIFTT,
				       @restrict const  dlong  *  vmapM,
				       @restrict const  dlong  *  vmapP,
				       @restrict const  int   *  EToB,
				       const dfloat time,
				       @restrict const  dfloat *  x,
				       @restrict const  dfloat *  y,
				       @restrict const  dfloat *  z,
				       const dlong offset,
				       @restrict const  dfloat *  U,
				       @restrict dfloat *  NU){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxNU[p_NblockS][p_Nq][p_Nq];
    @shared dfloat s_fluxNV[p_NblockS][p_Nq][p_Nq];
    @shared dfloat s_fluxNW[p_NblockS][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
        for(int j=0;j<p_Nq;++j){
          s_fluxNU[es][j][i] = 0.f;
          s_fluxNV[es][j][i] = 0.f;
          s_fluxNW[es][j][i] = 0.f;
        }
      }
    }

    @barrier("local");

    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          //          surfaceTerms(sk0,0,i,0     );
          surfaceTerms(e, es, offset, sk0, 0, i, 0,
		       time, x, y, z, sgeo, vmapM, vmapP, U, s_fluxNU, s_fluxNV, s_fluxNW);

	  // surfaceTerms(sk2,2,i,p_Nq-1);
          surfaceTerms(e, es, offset, sk2, 2, i, p_Nq-1,
                       time, x, y, z, sgeo, vmapM, vmapP, U, s_fluxNU, s_fluxNV, s_fluxNW);
        }
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          // surfaceTerms(sk1,1,p_Nq-1,j);
          surfaceTerms(e, es, offset, sk1, 1, p_Nq-1, j,
		       time, x, y, z, sgeo, vmapM, vmapP, U, s_fluxNU, s_fluxNV, s_fluxNW);

          //  surfaceTerms(sk3,3,0     ,j);
          surfaceTerms(e, es, offset, sk3, 3, 0, j,
                       time, x, y, z, sgeo, vmapM, vmapP, U, s_fluxNU, s_fluxNV, s_fluxNW);
        }
      }
    }

    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
#pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            const dlong id = e*p_Np + j*p_Nq + i;

            NU[id+0*offset] += s_fluxNU[es][j][i];
            NU[id+1*offset] += s_fluxNV[es][j][i];
            NU[id+2*offset] += s_fluxNW[es][j][i];
          }
        }
      }
    }
  }
}



