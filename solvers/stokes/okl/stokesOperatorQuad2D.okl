/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

@kernel void stokesOperatorQuad2D(const dlong Nelements,
				  const dlong offset,
				  @restrict const dfloat *vgeo,
				  @restrict const dfloat *D,
				  @restrict const dfloat *eta,
				  @restrict const dfloat *q,
				  @restrict dfloat *Aq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];

    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];

    @exclusive dfloat r_U,  r_V;
    @exclusive dfloat r_AU, r_AV;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j*p_Nq + e*p_Np;
	
	s_U[j][i] = q[base + 0*offset]; 
	s_V[j][i] = q[base + 1*offset];
	
	r_AU = 0.f; // zero the accumulator
	r_AV = 0.f; // zero the accumulator
      }
    }

    @barrier("local");
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
	dfloat Ur = 0.f, Us = 0.f; 
	dfloat Vr = 0.f, Vs = 0.f;
	
#pragma unroll p_Nq
	for(int m = 0; m < p_Nq; m++) {
	  dfloat Dim = s_D[i][m]; 
	  dfloat Djm = s_D[j][m];
	  
	  Ur += Dim*s_U[j][m];
	  Us += Djm*s_U[m][i];
	  
	  Vr += Dim*s_V[j][m];
	  Vs += Djm*s_V[m][i];
	}
	
	// prefetch geometric factors
	const dlong gbase = e*p_Nvgeo*p_Np + j*p_Nq + i;
	
	const dfloat rx = vgeo[gbase+p_RXID*p_Np];
	const dfloat sx = vgeo[gbase+p_SXID*p_Np];
	
	const dfloat ry = vgeo[gbase+p_RYID*p_Np];
	const dfloat sy = vgeo[gbase+p_SYID*p_Np];
	
	const dfloat JW = vgeo[gbase+p_JWID*p_Np];
	
	const dfloat G00 = (rx*rx+ry*ry)*JW;
	const dfloat G01 = (rx*sx+ry*sy)*JW;
	const dfloat G11 = (sx*sx+sy*sy)*JW;
	
	const dlong pid = i + j*p_Nq + e*p_Np + 2*offset; // 2 ?
	
	const dfloat pk = q[pid]; 
	
	const dfloat JWpk = -JW*pk;
	
	// (grad phi, grad U - delta_x p)
	// (grad phi, grad V - delta_y p)
	// (grad phi, grad W - delta_z p)
	s_GUr[j][i] = (G00*Ur + G01*Us) + rx*JWpk;
	s_GVr[j][i] = (G00*Vr + G01*Vs) + ry*JWpk;
	
	s_GUs[j][i] = (G01*Ur + G11*Us) + sx*JWpk;
	s_GVs[j][i] = (G01*Vr + G11*Vs) + sy*JWpk;
	
	r_AU += JW*lambda*s_U[j][i];
	r_AV += JW*lambda*s_V[j][i];
	
	// (phi, divU)
	dfloat AP = 0;
	AP += rx*Ur + sx*Us;
	AP += ry*Vr + sy*Vs;
	
	Aq[pid] = AP;
      }
    }
    
    @barrier("local");
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
	dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;
	
#pragma unroll p_Nq
	for(int m = 0; m < p_Nq; m++){
	  dfloat Dmi = s_D[m][i];
	  dfloat Dmj = s_D[m][j];
	  
	  AUtmp += Dmi*s_GUr[j][m];
	  AUtmp += Dmj*s_GUs[m][i];
	  
	  AVtmp += Dmi*s_GVr[j][m];
	  AVtmp += Dmj*s_GVs[m][i];
	}
	
	r_AU += AUtmp;
	r_AV += AVtmp;
	
	// write out U,V
	const dlong id = e*p_Np + j*p_Nq + i;
	Aq[id+0*offset] = r_AU;
	Aq[id+1*offset] = r_AV;
      }
    }
  }
}
