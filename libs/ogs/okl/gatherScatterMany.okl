/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

/*------------------------------------------------------------------------------
  The array gather-scatter kernel
------------------------------------------------------------------------------*/
#define DEFINE_GATHERSCATTER(T,OP)                                      \
@kernel void gatherScatterMany_##T##_##OP(const dlong Ngather,          \
                               const int Nentries,                      \
                               const dlong stride,                      \
                               @restrict const  dlong *  gatherStarts,  \
                               @restrict const  dlong *  gatherIds,     \
                               @restrict            T *  q)             \
{                                                                       \
  for(dlong g=0;g<Ngather*Nentries;++g;@tile(256,@outer,@inner)){       \
    const dlong gid = g%Ngather;                                        \
    const int k = g/Ngather;                                            \
    const dlong start = gatherStarts[gid];                              \
    const dlong end = gatherStarts[gid+1];                              \
    if((start+1)!=end){                                                 \
      T gq = init_##T##_##OP;                                           \
      for(dlong n=start;n<end;++n){                                     \
        const dlong id = gatherIds[n];                                  \
        OGS_DO_##OP(gq,q[id+k*stride]);                                 \
      }                                                                 \
      for(dlong n=start;n<end;++n){                                     \
        const dlong id = gatherIds[n];                                  \
        q[id+k*stride] = gq;                                            \
      }                                                                 \
    }                                                                   \
  }                                                                     \
}

/*------------------------------------------------------------------------------
  The array gather kernel
------------------------------------------------------------------------------*/
#define DEFINE_GATHER(T,OP)                                             \
@kernel void gatherMany_##T##_##OP(const dlong Ngather,                 \
                               const int Nentries,                      \
                               const dlong stride,                      \
                               const dlong gstride,                     \
                               @restrict const  dlong *  gatherStarts,  \
                               @restrict const  dlong *  gatherIds,     \
                               @restrict const      T *  q,             \
                               @restrict            T *  gatherq)       \
{                                                                       \
  for(dlong g=0;g<Ngather*Nentries;++g;@tile(256,@outer,@inner)){       \
    const dlong gid = g%Ngather;                                        \
    const int k = g/Ngather;                                            \
    const dlong start = gatherStarts[gid];                              \
    const dlong end = gatherStarts[gid+1];                              \
    T gq = init_##T##_##OP;                                             \
    for(dlong n=start;n<end;++n){                                       \
      const dlong id = gatherIds[n];                                    \
      OGS_DO_##OP(gq,q[id+k*stride]);                                   \
    }                                                                   \
    gatherq[gid+k*gstride] = gq;                                        \
  }                                                                     \
}

/*------------------------------------------------------------------------------
  The array scatter kernel
------------------------------------------------------------------------------*/
#define DEFINE_SCATTER(T)                                               \
@kernel void scatterMany_##T(const dlong Nscatter,                      \
                         const int Nentries,                            \
                         const dlong stride,                            \
                         const dlong sstride,                           \
                         @restrict const  dlong *  scatterStarts,       \
                         @restrict const  dlong *  scatterIds,          \
                         @restrict const      T *  q,                   \
                         @restrict            T *  scatterq)            \
{                                                                       \
  for(dlong s=0;s<Nscatter*Nentries;++s;@tile(256,@outer,@inner)){      \
    const dlong sid = s%Nscatter;                                       \
    const int k = s/Nscatter;                                           \
    const T qs = q[sid+k*stride];                                       \
    const dlong start = scatterStarts[sid];                             \
    const dlong end = scatterStarts[sid+1];                             \
    for(dlong n=start;n<end;++n){                                       \
      const dlong id = scatterIds[n];                                   \
      scatterq[id+k*sstride] = qs;                                      \
    }                                                                   \
  }                                                                     \
}

#define DEFINE_PROCS(T) \
  OGS_FOR_EACH_OP(T,DEFINE_GATHERSCATTER) \
  OGS_FOR_EACH_OP(T,DEFINE_GATHER) \
  DEFINE_SCATTER(T)

OGS_FOR_EACH_DOMAIN(DEFINE_PROCS)
