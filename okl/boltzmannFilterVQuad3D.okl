kernel void boltzmannFilterVQuad3D(const iint Nelements,
				   const iint * restrict elementIds,
				   const iint nrhs,
				   const iint * restrict shift,
				   const dfloat alpha,
				   const dfloat * restrict F,
				   const iint * restrict cubeFaceNumber,
				   const iint * restrict EToE,
				   const dfloat * restrict x,
				   const dfloat * restrict y,
				   const dfloat * restrict z,
				   const iint * restrict lev_updates,
				   const iint * restrict lev_numbers,
				   const iint l,
				   const iint order,
				   const dfloat * restrict qIn,
				   dfloat * restrict Fq) {
  
  for (iint eo = 0; eo < Nelements;++eo;outer0) {
    
    shared dfloat s_F[3][p_Nq][p_Nq];
    shared dfloat s_q[p_Nfields][3][p_Nq][p_Nq];
    shared iint eC;
    shared iint mark_edge;
    shared iint shiftl;
    
    for (iint j=0;j<p_Nq; ++j; inner1) {
      for (iint i=0; i<p_Nq; ++i; inner0) {
	s_F[0][j][i] = F[i+0*p_Nq+j*3*p_Nq];
	s_F[1][j][i] = F[i+1*p_Nq+j*3*p_Nq];
	s_F[2][j][i] = F[i+2*p_Nq+j*3*p_Nq];

	shiftl = shift[l];
	
	eC = elementIds[eo];
	const iint eL = EToE[eC*p_Nfaces+0];
	const iint eR = EToE[eC*p_Nfaces+2];

	//unordered, used only for bounds checking
	const iint eU = EToE[eC*p_Nfaces+1];
	const iint eD = EToE[eC*p_Nfaces+3];

	const iint faceC = cubeFaceNumber[eC];
	const iint faceL = cubeFaceNumber[eL];
	const iint faceR = cubeFaceNumber[eR];
	const iint faceU = cubeFaceNumber[eU];
	const iint faceD = cubeFaceNumber[eD];

	mark_edge  = (faceC - faceL)*(faceC - faceL);
	mark_edge += (faceC - faceR)*(faceC - faceR);
	mark_edge += (faceC - faceU)*(faceC - faceU);
	mark_edge += (faceC - faceD)*(faceC - faceD);
	
	occaUnroll(p_Nfields)
	  for(iint fld=0;fld<p_Nfields;++fld){
	    s_q[fld][1][j][i] = qIn[eC*p_Np*p_Nfields*nrhs + shiftl*p_Np*p_Nfields + fld*p_Np + j*p_Nq + i];
	   
	    //edge of an mrab level, but not the edge of a face
	    if(mark_edge < 1) {
	      const iint levL = lev_numbers[eL];
	      const iint levR = lev_numbers[eR];
	      const dfloat stepC = lev_updates[l];
	      const dfloat stepL = lev_updates[levL];
	      const dfloat stepR = lev_updates[levR];
	      const dfloat sizeL = 1<<levL;
	      const dfloat sizeR = 1<<levR;
	      const iint shiftL = shift[levL];
	      const iint shiftR = shift[levR];

	      if (stepL != stepC && order >= 0) {
		dfloat q_sum = 0;
		dfloat timei = 0;
		for (iint li=0; li<nrhs; ++li) {		  
		  const iint rhsNum = (shiftL + li) % nrhs;
		  
		  dfloat q_prod = qIn[eL*p_Np*p_Nfields*nrhs + rhsNum*p_Np*p_Nfields + fld*p_Np+ j*p_Nq + i];

		  dfloat timej = 0;
		  
		  for (iint lj = 0; lj < nrhs; ++lj) {
		    if (lj != li) {
		      q_prod *= (stepC - stepL + timej)/(timej - timei);
		    }
		    timej += ((order >> levL) > lj) ? sizeL : 1;
		  }
		  timei += ((order>>levL) > li) ? sizeL : 1;
		  q_sum += q_prod;
		}
		s_q[fld][0][j][i] = q_sum;
	      }
	      else {
		s_q[fld][0][j][i] = qIn[eL*p_Np*p_Nfields*nrhs + shiftL*p_Np*p_Nfields + fld*p_Np + j*p_Nq + i];
	      }
	      
	      if (stepR != stepC && order >= 0) {
		dfloat q_sum = 0;
		dfloat timei = 0;
		
		for (iint li=0; li<nrhs; ++li) {		  
		  const iint rhsNum = (shiftR + li) % nrhs;
		  
		  dfloat q_prod = qIn[eR*p_Np*p_Nfields*nrhs + rhsNum*p_Np*p_Nfields + fld*p_Np+ j*p_Nq + i];

		  dfloat timej = 0;
		  
		  for (iint lj = 0; lj < nrhs; ++lj) {
		    if (lj != li) {
		      q_prod *= (stepC - stepR + timej)/(timej - timei);
		    }
		    timej += ((order >> levR) > lj) ? sizeR : 1;
		  }
		  timei += ((order>>levR) > li) ? sizeR : 1;
		  q_sum += q_prod;
		}
		s_q[fld][2][j][i] = q_sum;
	      }
	      else {
		s_q[fld][2][j][i] = qIn[eR*p_Np*p_Nfields*nrhs + shiftR*p_Np*p_Nfields + fld*p_Np + j*p_Nq + i];
	      }
	    }
	  }
      }
    }

    barrier(localMemFence);

    for (iint j=0;j<p_Nq; ++j; inner1) {
      for (iint i=0; i<p_Nq; ++i; inner0) {
	dfloat Fqij[p_Nfields];
	if(mark_edge < 1){
	  occaUnroll(p_Nfields)
	    for(iint fld=0;fld<p_Nfields;++fld){
	      Fqij[fld] = 0;
	    }
	  
	  occaUnroll(p_Nq)
	    for(int n=0;n<p_Nq;++n){
	      // fetch once, use p_Nfields times
	      const dfloat FinL = s_F[0][j][n];
	      const dfloat FinC = s_F[1][j][n];
	      const dfloat FinR = s_F[2][j][n];
	      
	      // ratio of 1 shared per 2 flops: on P100 => 2TFLOPS max
	      occaUnroll(p_Nfields)
		for(iint fld=0;fld<p_Nfields;++fld){
		  Fqij[fld] += FinL*s_q[fld][0][n][i];
		  Fqij[fld] += FinC*s_q[fld][1][n][i];
		  Fqij[fld] += FinR*s_q[fld][2][n][i];
		}
	    }

	  for (iint fld=0; fld<p_Nfields;++fld) {
	    Fqij[fld] = Fqij[fld]*(1 - alpha) + s_q[fld][1][j][i]*alpha;
	  }

	  	// constrain momentum changes to lie on sphere
	  const dfloat xij = x[i+j*p_Nq+eC*p_Np];
	  const dfloat yij = y[i+j*p_Nq+eC*p_Np];
	  const dfloat zij = z[i+j*p_Nq+eC*p_Np];
	  
	  // remove radial component of momentum change
	  const dfloat xdotrhsq = (Fqij[1]*xij + Fqij[2]*yij + Fqij[3]*zij)*p_invRadiusSq;
	  
	  Fqij[1] -= xij*xdotrhsq; 
	  Fqij[2] -= yij*xdotrhsq;
	  Fqij[3] -= zij*xdotrhsq;
	}
	else{
	  
	  occaUnroll(p_Nfields)
	    for(iint fld=0;fld<p_Nfields;++fld){
	      Fqij[fld] = s_q[fld][1][j][i];
	    }
	}
	
	occaUnroll(p_Nfields)
	  for(iint fld=0;fld<p_Nfields;++fld){
	    Fq[eC*p_Nfields*p_Np*nrhs + shiftl*p_Np*p_Nfields + fld*p_Np + j*p_Nq + i] = Fqij[fld];
	  }
      }
    }
  }
}

kernel void boltzmannFilterVq0Quad3D(const iint Nelements,
				     const dfloat alpha,
				     const dfloat * restrict F,
				     const iint * restrict cubeFaceNumber,
				     const iint * restrict EToE,
				     const dfloat * restrict x,
				     const dfloat * restrict y,
				     const dfloat * restrict z,
				     const dfloat * restrict qIn,
				     dfloat * restrict Fq) {
  
  for (iint eo = 0; eo < Nelements;++eo;outer0) {
    
    shared dfloat s_F[3][p_Nq][p_Nq];
    shared dfloat s_q[p_Nfields][3][p_Nq][p_Nq];
    shared iint mark_edge;
    
    for (iint j=0;j<p_Nq; ++j; inner1) {
      for (iint i=0; i<p_Nq; ++i; inner0) {
	s_F[0][j][i] = F[i+0*p_Nq+j*3*p_Nq];
	s_F[1][j][i] = F[i+1*p_Nq+j*3*p_Nq];
	s_F[2][j][i] = F[i+2*p_Nq+j*3*p_Nq];
	
	const iint eL = EToE[eo*p_Nfaces+0];
	const iint eR = EToE[eo*p_Nfaces+2];

	//unordered, used only for bounds checking
	const iint eU = EToE[eo*p_Nfaces+1];
	const iint eD = EToE[eo*p_Nfaces+3];

	const iint faceC = cubeFaceNumber[eo];
	const iint faceL = cubeFaceNumber[eL];
	const iint faceR = cubeFaceNumber[eR];
	const iint faceU = cubeFaceNumber[eU];
	const iint faceD = cubeFaceNumber[eD];

	mark_edge  = (faceC - faceL)*(faceC - faceL);
	mark_edge += (faceC - faceR)*(faceC - faceR);
	mark_edge += (faceC - faceU)*(faceC - faceU);
	mark_edge += (faceC - faceD)*(faceC - faceD);
	
	occaUnroll(p_Nfields)
	  for(iint fld=0;fld<p_Nfields;++fld){
	    s_q[fld][1][j][i] = qIn[eo*p_Np*p_Nfields + fld*p_Np + j*p_Nq + i];
	   
	    //edge of an mrab level, but not the edge of a face
	    if(mark_edge < 1) {
		s_q[fld][0][j][i] = qIn[eL*p_Np*p_Nfields + fld*p_Np + j*p_Nq + i];
		s_q[fld][2][j][i] = qIn[eR*p_Np*p_Nfields + fld*p_Np + j*p_Nq + i];
	    }
	  }
      }
    }

    barrier(localMemFence);

    for (iint j=0;j<p_Nq; ++j; inner1) {
      for (iint i=0; i<p_Nq; ++i; inner0) {
	dfloat Fqij[p_Nfields];
	if(mark_edge < 1){
	  occaUnroll(p_Nfields)
	    for(iint fld=0;fld<p_Nfields;++fld){
	      Fqij[fld] = 0;
	    }
	  
	  occaUnroll(p_Nq)
	    for(int n=0;n<p_Nq;++n){
	      // fetch once, use p_Nfields times
	      const dfloat FinL = s_F[0][j][n];
	      const dfloat FinC = s_F[1][j][n];
	      const dfloat FinR = s_F[2][j][n];
	      
	      // ratio of 1 shared per 2 flops: on P100 => 2TFLOPS max
	      occaUnroll(p_Nfields)
		for(iint fld=0;fld<p_Nfields;++fld){
		  Fqij[fld] += FinL*s_q[fld][0][n][i];
		  Fqij[fld] += FinC*s_q[fld][1][n][i];
		  Fqij[fld] += FinR*s_q[fld][2][n][i];
		}
	    }

	  for (iint fld=0; fld<p_Nfields;++fld) {
	    Fqij[fld] = Fqij[fld]*(1 - alpha) + s_q[fld][1][j][i]*alpha;
	  }

	  	// constrain momentum changes to lie on sphere
	  const dfloat xij = x[i+j*p_Nq+eo*p_Np];
	  const dfloat yij = y[i+j*p_Nq+eo*p_Np];
	  const dfloat zij = z[i+j*p_Nq+eo*p_Np];
	  
	  // remove radial component of momentum change
	  const dfloat xdotrhsq = (Fqij[1]*xij + Fqij[2]*yij + Fqij[3]*zij)*p_invRadiusSq;
	  
	  Fqij[1] -= xij*xdotrhsq; 
	  Fqij[2] -= yij*xdotrhsq;
	  Fqij[3] -= zij*xdotrhsq;
	}
	else{
	  
	  occaUnroll(p_Nfields)
	    for(iint fld=0;fld<p_Nfields;++fld){
	      Fqij[fld] = s_q[fld][1][j][i];
	    }
	}
	
	occaUnroll(p_Nfields)
	  for(iint fld=0;fld<p_Nfields;++fld){
	    Fq[eo*p_Nfields*p_Np + fld*p_Np + j*p_Nq + i] = Fqij[fld];
	  }
      }
    }
  }
}
